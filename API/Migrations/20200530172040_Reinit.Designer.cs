// <auto-generated />
using System;
using API.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200530172040_Reinit")]
    partial class Reinit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(true);

                    b.Property<DateTime>("DateOfCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 5, 30, 19, 20, 39, 384, DateTimeKind.Local).AddTicks(4115));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = "2f414b21-a850-4189-bef2-9b2f608089fc",
                            Content = "Komentarz: 448bcf31-8b31-4690-a21a-3ee9c70a24bb a9f6519d-3bc9-4287-9e62-504e7bb9964c",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(5847),
                            UserId = "1",
                            VideoId = "dc12ceb9-f672-4466-b013-71cb91a98641"
                        },
                        new
                        {
                            Id = "eb21dab0-3933-4fa4-ae89-30904d37a94e",
                            Content = "Komentarz: 80de478f-c877-4dbe-899b-352ceb828b9d 4745f0d8-d31c-41f7-adba-553cb54a100b",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(6620),
                            UserId = "1",
                            VideoId = "dc12ceb9-f672-4466-b013-71cb91a98641"
                        },
                        new
                        {
                            Id = "95e2a337-2eb0-46e6-b421-fcac74e34436",
                            Content = "Komentarz: e988e1a8-2dde-4519-9597-e74143cde9c6 fa021bc7-47fe-40af-85f3-90257c1a7898",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(6736),
                            UserId = "1",
                            VideoId = "dc12ceb9-f672-4466-b013-71cb91a98641"
                        },
                        new
                        {
                            Id = "9d001d06-9321-480d-b4d9-7da9d59f8b38",
                            Content = "Komentarz: 5957cfcb-7c02-43f2-a378-ad87f242d91e b0d4f43a-feb3-49f3-b82b-d1c1b0962ae1",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(6853),
                            UserId = "1",
                            VideoId = "dc12ceb9-f672-4466-b013-71cb91a98641"
                        },
                        new
                        {
                            Id = "d9086957-6f8b-4736-ab17-edace34b99c3",
                            Content = "Komentarz: 10f26da6-816f-4a5d-9f64-091ab83740d6 659877de-f35a-4fae-bbaf-0e5be1028733",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(7064),
                            UserId = "1",
                            VideoId = "dc12ceb9-f672-4466-b013-71cb91a98641"
                        },
                        new
                        {
                            Id = "1b2d4145-c1da-4a3a-954d-ddffb233e7db",
                            Content = "Komentarz: f1da91ab-47d3-4058-bff7-8baa72c50b7e 252da633-3704-49e9-b520-9ee0dde1833a",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(7186),
                            UserId = "1",
                            VideoId = "dc12ceb9-f672-4466-b013-71cb91a98641"
                        },
                        new
                        {
                            Id = "ec998917-d671-48a2-bf18-c0658ba0a895",
                            Content = "Komentarz: 4500d4ac-83bf-49d2-8a73-fd12b65475bf 6c307268-d7f6-426e-b380-d3d03258b9a7",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(8336),
                            UserId = "1",
                            VideoId = "66c11beb-3c2b-400d-b0c4-c947d10d2796"
                        },
                        new
                        {
                            Id = "03aa6298-d7da-45b3-b771-5f6252613d7a",
                            Content = "Komentarz: f513c55b-6889-4291-9922-7caa7d162229 f64b8534-c2e9-4b47-a81b-0fee036e9934",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(8465),
                            UserId = "1",
                            VideoId = "66c11beb-3c2b-400d-b0c4-c947d10d2796"
                        },
                        new
                        {
                            Id = "ca7cf74c-8c1a-4fda-b08b-d20bfe021ddc",
                            Content = "Komentarz: d9e3616b-5b78-48a1-96cb-75182d20bf72 91b10c73-1926-4af6-af31-26ebb87fc2ee",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(8587),
                            UserId = "1",
                            VideoId = "66c11beb-3c2b-400d-b0c4-c947d10d2796"
                        },
                        new
                        {
                            Id = "f30d6702-dcbb-4f64-8d39-c632fe5e81fb",
                            Content = "Komentarz: 1f6f8645-5a5c-460e-b725-9992d0ba1fc4 12066b14-fb15-4b0d-9e5a-50ea640263b0",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(8707),
                            UserId = "1",
                            VideoId = "66c11beb-3c2b-400d-b0c4-c947d10d2796"
                        },
                        new
                        {
                            Id = "484e0547-8f41-4470-9ead-e34f64e064ec",
                            Content = "Komentarz: 9a5c0b5d-897a-4e3e-93c0-76156b421c6a 2ba06b57-852a-4112-96ab-42f4755fdbb7",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(8826),
                            UserId = "1",
                            VideoId = "66c11beb-3c2b-400d-b0c4-c947d10d2796"
                        },
                        new
                        {
                            Id = "270e2a72-c0a1-4b84-80f5-a9d7f96e97eb",
                            Content = "Komentarz: ec5e9f14-477e-46f8-943e-0ed83e63df8c 373f0bfa-d24f-414f-93e8-ea13955b0bd8",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(8944),
                            UserId = "1",
                            VideoId = "66c11beb-3c2b-400d-b0c4-c947d10d2796"
                        },
                        new
                        {
                            Id = "4a6b6fb6-7dc7-4f03-8249-52d6e150b1a8",
                            Content = "Komentarz: 1f1c540a-7fae-4957-8c73-cf6d17a9a19b 773b612c-4ba7-49ef-820f-e454600be2c0",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(9396),
                            UserId = "1",
                            VideoId = "ee36dcc0-f318-4055-99d8-1ec43a6199e2"
                        },
                        new
                        {
                            Id = "09b22482-f8ca-4cf0-96db-26a18bf786bd",
                            Content = "Komentarz: cb47d324-9c14-4802-ad44-e227fafcd7fb a232d170-d3c8-4c21-9f25-91d3fe8f5591",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(9522),
                            UserId = "1",
                            VideoId = "ee36dcc0-f318-4055-99d8-1ec43a6199e2"
                        },
                        new
                        {
                            Id = "8a818330-722c-4d44-a1a8-3b3d3666b623",
                            Content = "Komentarz: 68eb0f8e-b8bd-4f57-b297-5b0bdaa9457e fa25be2d-6057-4c4a-8510-9bf2952c86cb",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(9638),
                            UserId = "1",
                            VideoId = "ee36dcc0-f318-4055-99d8-1ec43a6199e2"
                        },
                        new
                        {
                            Id = "d3b7eb33-2c37-4695-826d-cee275f6bb9f",
                            Content = "Komentarz: ec8aa1cf-8710-438e-8de7-9cf1d03bcd0a baa096c1-3e91-49c4-ad5d-691a447b7b32",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(9759),
                            UserId = "1",
                            VideoId = "ee36dcc0-f318-4055-99d8-1ec43a6199e2"
                        },
                        new
                        {
                            Id = "4d7b8e4c-3bf2-4318-add4-e4dadd14b7da",
                            Content = "Komentarz: bcb39bcd-306b-4956-9f6b-5d1bec0bb21f fb109bb3-4537-427b-83c0-4159fdfb33d3",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(9875),
                            UserId = "1",
                            VideoId = "ee36dcc0-f318-4055-99d8-1ec43a6199e2"
                        },
                        new
                        {
                            Id = "a95dc6db-2d16-4cfa-8443-1f81d92928af",
                            Content = "Komentarz: 0951f942-7785-4705-9344-b08410a45cba ac58cd2c-5cae-4250-a409-dd3f6a0d7660",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(11),
                            UserId = "1",
                            VideoId = "ee36dcc0-f318-4055-99d8-1ec43a6199e2"
                        },
                        new
                        {
                            Id = "91c627ef-2310-436e-bc74-5dccbf0c25fb",
                            Content = "Komentarz: 2a7373a8-5749-4e2b-9301-55c144d79624 2eca419d-a07f-4dfb-a3ef-9c721358daa5",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(570),
                            UserId = "1",
                            VideoId = "49866006-f9c5-40be-bc8d-82a4814b1f72"
                        },
                        new
                        {
                            Id = "ec897da7-d892-4869-9713-b75d71ab02d0",
                            Content = "Komentarz: 5abaf33b-3a62-40a1-a1b0-fe31397c2071 d7aa2aff-c32a-4903-9fc3-ba994c14aef9",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(714),
                            UserId = "1",
                            VideoId = "49866006-f9c5-40be-bc8d-82a4814b1f72"
                        },
                        new
                        {
                            Id = "2f8c530a-08d5-4174-9d0f-880794c7c9df",
                            Content = "Komentarz: dc9b55c1-f3ce-47ca-8677-7ecb5eb015b0 91812988-b963-4bfe-a7cb-2c1eefc9aada",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(812),
                            UserId = "1",
                            VideoId = "49866006-f9c5-40be-bc8d-82a4814b1f72"
                        },
                        new
                        {
                            Id = "19c74347-f9eb-404e-b143-b39455c3eefc",
                            Content = "Komentarz: 9d4bc7dd-8892-4714-a0e2-754d7fb34ae2 cf6a6c1a-2918-43a3-a7d8-71a04e1945e6",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(902),
                            UserId = "1",
                            VideoId = "49866006-f9c5-40be-bc8d-82a4814b1f72"
                        },
                        new
                        {
                            Id = "87ea9d7b-9814-459f-853c-03710ba61cdc",
                            Content = "Komentarz: de34ad9e-7fbc-433d-a3de-7dac2c35138e 181c1669-8e8c-46b7-9d48-f0bca787bc93",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(1015),
                            UserId = "1",
                            VideoId = "49866006-f9c5-40be-bc8d-82a4814b1f72"
                        },
                        new
                        {
                            Id = "403b138d-bc7a-4278-a56e-1f2031049591",
                            Content = "Komentarz: 145f8460-87fb-4c94-adfc-f454bce3589b 0286a2e6-2c2b-40b0-bdc9-26b4fd5e34f7",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(1100),
                            UserId = "1",
                            VideoId = "49866006-f9c5-40be-bc8d-82a4814b1f72"
                        },
                        new
                        {
                            Id = "e7779e77-2d69-44be-8466-a3d38821d3d2",
                            Content = "Komentarz: c5bab837-0bec-4d4d-b051-4f595d9c8039 1f0b9294-2dcf-4381-b002-c9c715d21407",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(1553),
                            UserId = "1",
                            VideoId = "c2b2a299-ae16-4d33-b8db-bb224badeb48"
                        },
                        new
                        {
                            Id = "22ac41af-6c19-46a7-b1f9-ccc82a215b9d",
                            Content = "Komentarz: 1b45887e-2f3e-4e53-a68d-b49217c4f460 8d76925c-e72b-4dfd-8159-546cfeb2618e",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(1729),
                            UserId = "1",
                            VideoId = "c2b2a299-ae16-4d33-b8db-bb224badeb48"
                        },
                        new
                        {
                            Id = "5b42a63a-084a-483d-b57b-3df42e3a36e9",
                            Content = "Komentarz: 4c77160b-01fd-4a80-b04f-1a23579e5003 e12d7b94-42e1-4e33-9e81-e281e3c859cf",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(1890),
                            UserId = "1",
                            VideoId = "c2b2a299-ae16-4d33-b8db-bb224badeb48"
                        },
                        new
                        {
                            Id = "b44c8cac-03bf-43af-b9cf-5f05e47b81c6",
                            Content = "Komentarz: e6aad903-75b1-4b2b-b2c2-3e768a2cf65d acec9d1a-9e93-4d6d-91ee-55d894256a37",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(2044),
                            UserId = "1",
                            VideoId = "c2b2a299-ae16-4d33-b8db-bb224badeb48"
                        },
                        new
                        {
                            Id = "0e9378ee-85e1-4a2a-b8d7-817282963e66",
                            Content = "Komentarz: c05a5aa3-22f1-4fd7-a9b6-9cc2c9617a46 67bc1be1-fad2-44ed-93b4-5aa63615b7b4",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(2212),
                            UserId = "1",
                            VideoId = "c2b2a299-ae16-4d33-b8db-bb224badeb48"
                        },
                        new
                        {
                            Id = "1ba4e78f-21e4-4296-9458-287318b88021",
                            Content = "Komentarz: 04c9ca23-9117-484e-81fe-b08181e4e9e2 60899487-215c-44b4-a633-f7ca6944549e",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(2378),
                            UserId = "1",
                            VideoId = "c2b2a299-ae16-4d33-b8db-bb224badeb48"
                        },
                        new
                        {
                            Id = "5e95d881-6b60-4f32-9648-fc7ce8659ad4",
                            Content = "Komentarz: 239ed381-c63c-40b9-9dbd-f24394f68fb4 978388c7-9ac6-4400-a8cc-022897200480",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(2710),
                            UserId = "1",
                            VideoId = "c3e1ee03-4105-45f5-ad45-f30cf28e0b34"
                        },
                        new
                        {
                            Id = "9a506565-2f9c-47e7-b747-fc9265c7dcd2",
                            Content = "Komentarz: f1154527-3420-40ff-8f95-d14d38020829 7b5a3f86-7475-448f-9858-3644e41087c7",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(2788),
                            UserId = "1",
                            VideoId = "c3e1ee03-4105-45f5-ad45-f30cf28e0b34"
                        },
                        new
                        {
                            Id = "15f23304-3cf7-464a-ba53-7cdb1ccda265",
                            Content = "Komentarz: aa8dd35e-35d8-4fed-a514-44f50d6fa17a 19d400f6-68ab-4490-b7fd-6f2f07e6628e",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(2886),
                            UserId = "1",
                            VideoId = "c3e1ee03-4105-45f5-ad45-f30cf28e0b34"
                        },
                        new
                        {
                            Id = "4b02fc04-8ae3-40f3-b756-2ad0bded7b56",
                            Content = "Komentarz: e5a63bf8-5956-4384-a97b-585e04005687 2e993ac5-d056-49b8-8e6a-bac4196cb800",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(2973),
                            UserId = "1",
                            VideoId = "c3e1ee03-4105-45f5-ad45-f30cf28e0b34"
                        },
                        new
                        {
                            Id = "db4f15a5-83e7-4c0d-b142-1e64c7125043",
                            Content = "Komentarz: 3f51fd82-e74a-4a53-84d1-37b515921aab f924cf70-c0f8-497c-8433-9ed0d6e8edc4",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(3046),
                            UserId = "1",
                            VideoId = "c3e1ee03-4105-45f5-ad45-f30cf28e0b34"
                        },
                        new
                        {
                            Id = "6878362b-dd4a-490a-84e7-8843bd7568b5",
                            Content = "Komentarz: 419d7f16-5d85-47c3-9125-758b2e0d8901 b75431fe-a2a1-47a6-bc07-8ed0ea589fd0",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(3159),
                            UserId = "1",
                            VideoId = "c3e1ee03-4105-45f5-ad45-f30cf28e0b34"
                        });
                });

            modelBuilder.Entity("API.Models.Entities.PlayList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlayLists");
                });

            modelBuilder.Entity("API.Models.Entities.SocialBoardPost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(true);

                    b.Property<DateTime>("DateOfCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("API.Models.Entities.Subscription", b =>
                {
                    b.Property<string>("SubscriberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChanelAuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfCreateSubscription")
                        .HasColumnType("datetime2");

                    b.HasKey("SubscriberId", "ChanelAuthorId");

                    b.HasIndex("ChanelAuthorId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("API.Models.Entities.Video", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(5000)
                        .IsUnicode(true);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoCategoryId");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = "dc12ceb9-f672-4466-b013-71cb91a98641",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 431, DateTimeKind.Local).AddTicks(8494),
                            Description = "Opis:  43c96c27-f9d8-4155-9031-dd9cb0e26437 a03b7c69-1aaf-4ada-88dc-55c3745c7bab",
                            IsActive = false,
                            Name = "Film d54c6598-8b80-4a01-bc5d-df698d820f78 fc32cac8-62d4-4f01-91f4-d24dc6dc7a6d",
                            VideoCategoryId = "68ae8fc7-8716-4135-9146-9b8eac82825d"
                        },
                        new
                        {
                            Id = "66c11beb-3c2b-400d-b0c4-c947d10d2796",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(8190),
                            Description = "Opis:  cc2e384c-ae63-415d-8dbf-41e32816d5cf 73347e35-477b-4e39-bbe4-6bd524ae73f8",
                            IsActive = false,
                            Name = "Film 621d8fa5-4e6c-4851-b2b6-c86387db8976 703256e7-e2c6-488f-80b6-c6597bcf0b70",
                            VideoCategoryId = "46d87f13-62fb-4d15-943c-f6885be1f4ac"
                        },
                        new
                        {
                            Id = "ee36dcc0-f318-4055-99d8-1ec43a6199e2",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 432, DateTimeKind.Local).AddTicks(9271),
                            Description = "Opis:  dfc6f0f9-5126-4b9a-8802-836ecf538468 150b0a1e-dc3c-48d2-b68e-2d3d5a6965c9",
                            IsActive = false,
                            Name = "Film d42ff738-6a3b-4439-ab72-658e2ffe0814 dd6e6f55-559c-4c20-a9a6-54fe3c5750fb",
                            VideoCategoryId = "d71842eb-34af-4739-ba73-cc31fa25b40d"
                        },
                        new
                        {
                            Id = "49866006-f9c5-40be-bc8d-82a4814b1f72",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(436),
                            Description = "Opis:  0cca69c5-883e-4049-b661-e149dbbdefbb 7602f9eb-0b5d-47ff-ad03-288cc3c89d7b",
                            IsActive = false,
                            Name = "Film 0e2cc36f-1679-4df1-b198-c4479564d842 d3582a56-2801-409c-bdcc-2bf5981b13b5",
                            VideoCategoryId = "d7bdbb30-47ec-4b7c-b31d-6727609b76cc"
                        },
                        new
                        {
                            Id = "c2b2a299-ae16-4d33-b8db-bb224badeb48",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(1373),
                            Description = "Opis:  535c98ca-ba09-4ceb-b82b-57b00c651aa8 123295b3-1ba6-4069-aa0c-17d35af1d412",
                            IsActive = false,
                            Name = "Film 276bd9bd-fe9a-471e-b0d4-a5f24b545cce dcdf5fcc-c727-4843-800e-284389ad03d0",
                            VideoCategoryId = "757a6487-1efa-4c33-8632-bf759308812e"
                        },
                        new
                        {
                            Id = "c3e1ee03-4105-45f5-ad45-f30cf28e0b34",
                            DateOfCreate = new DateTime(2020, 5, 30, 19, 20, 39, 433, DateTimeKind.Local).AddTicks(2625),
                            Description = "Opis:  312c6084-f207-4f38-88df-d10f0e25f235 08984952-f14c-45ad-83c1-86cb64f7c533",
                            IsActive = false,
                            Name = "Film 34b6913d-2823-4e3f-9180-ddee363fe862 80814fee-a1eb-4a05-b343-1a0ceccadd93",
                            VideoCategoryId = "a5bf9d05-bdd7-42e4-8977-de002fc39caf"
                        });
                });

            modelBuilder.Entity("API.Models.Entities.VideoCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("VideoCategories");

                    b.HasData(
                        new
                        {
                            Id = "68ae8fc7-8716-4135-9146-9b8eac82825d",
                            Name = "Sc-Fi"
                        },
                        new
                        {
                            Id = "46d87f13-62fb-4d15-943c-f6885be1f4ac",
                            Name = "Komedia"
                        },
                        new
                        {
                            Id = "d71842eb-34af-4739-ba73-cc31fa25b40d",
                            Name = "Dramat"
                        },
                        new
                        {
                            Id = "d7bdbb30-47ec-4b7c-b31d-6727609b76cc",
                            Name = "Śmieszne Kotki"
                        },
                        new
                        {
                            Id = "757a6487-1efa-4c33-8632-bf759308812e",
                            Name = ""
                        },
                        new
                        {
                            Id = "a5bf9d05-bdd7-42e4-8977-de002fc39caf",
                            Name = "084b52e0-a28c-4798-adf1-f4d1da4e73b4"
                        });
                });

            modelBuilder.Entity("API.Models.Entities.VideoLike", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("API.Models.Entities.VideoOnPlayList", b =>
                {
                    b.Property<string>("VideoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayListId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VideoId", "PlayListId");

                    b.HasIndex("PlayListId");

                    b.ToTable("VideoOnPlayList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("API.Models.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DateOfCreateAccount")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("API.Models.Entities.Comment", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.HasOne("API.Models.Entities.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId");
                });

            modelBuilder.Entity("API.Models.Entities.PlayList", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithMany("PlayLists")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("API.Models.Entities.SocialBoardPost", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("API.Models.Entities.Subscription", b =>
                {
                    b.HasOne("API.Models.Entities.User", "ChanelAuthor")
                        .WithMany("Subscribers")
                        .HasForeignKey("ChanelAuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.User", "Subscriber")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.Entities.Video", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithMany("Videos")
                        .HasForeignKey("UserId");

                    b.HasOne("API.Models.Entities.VideoCategory", "VideoCategory")
                        .WithMany("Videos")
                        .HasForeignKey("VideoCategoryId");
                });

            modelBuilder.Entity("API.Models.Entities.VideoLike", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("API.Models.Entities.Video", "Video")
                        .WithMany("Likes")
                        .HasForeignKey("VideoId");
                });

            modelBuilder.Entity("API.Models.Entities.VideoOnPlayList", b =>
                {
                    b.HasOne("API.Models.Entities.PlayList", "PlayList")
                        .WithMany("VideosOnPlayList")
                        .HasForeignKey("PlayListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.Video", "Video")
                        .WithMany("VideoOnPlayLists")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
